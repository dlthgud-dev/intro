{"version":3,"sources":["components/About.js","components/Contacts.js","components/Experiences.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["About","Component","Contacts","Experiences","SubMenu","Menu","Navigation","state","current","handleClick","e","console","log","setState","key","mode","Item","icon","UserOutlined","to","ContactsOutlined","ProjectOutlined","title","ItemGroup","disabled","href","target","rel","React","Header","Layout","Content","Footer","App","document","getElementById","style","display","minHeight","basename","process","className","padding","margin","path","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAUeA,E,uKANP,OACI,4C,GAHQC,aCQLC,E,uKANP,OACI,4C,GAHWD,aCQRE,E,uKANP,OACI,+C,GAHcF,a,qDCKlBG,EAAYC,IAAZD,QA4COE,E,4MAzCbC,MAAQ,CACNC,QAAS,Q,EAGXC,YAAc,SAAAC,GACZC,QAAQC,IAAI,SAAUF,GACtB,EAAKG,SAAS,CACZL,QAASE,EAAEI,O,uDAKb,OACE,kBAAC,IAAD,CAAMC,KAAK,cACT,kBAAC,IAAKC,KAAN,CAAWF,IAAI,OAAOG,KAAM,kBAACC,EAAA,EAAD,OAC1B,kBAAC,IAAD,CAAMC,GAAG,UAAT,aAEF,kBAAC,IAAKH,KAAN,CAAWF,IAAI,WAAWG,KAAM,kBAACG,EAAA,EAAD,OAC9B,kBAAC,IAAD,CAAMD,GAAG,aAAT,aAEF,kBAACf,EAAD,CAASa,KAAM,kBAACI,EAAA,EAAD,MAAqBC,MAAM,eACxC,kBAAC,IAAKC,UAAN,CAAgBD,MAAM,UACpB,kBAAC,IAAKN,KAAN,CAAWF,IAAI,iBAAgB,kBAAC,IAAD,CAAMK,GAAG,gBAAT,cAC/B,kBAAC,IAAKH,KAAN,CAAWF,IAAI,iBAAgB,kBAAC,IAAD,CAAMK,GAAG,gBAAT,cAEjC,kBAAC,IAAKI,UAAN,CAAgBD,MAAM,UACpB,kBAAC,IAAKN,KAAN,CAAWF,IAAI,iBAAgB,kBAAC,IAAD,CAAMK,GAAG,gBAAT,aAC/B,kBAAC,IAAKH,KAAN,CAAWF,IAAI,iBAAgB,kBAAC,IAAD,CAAMK,GAAG,gBAAT,oBAGnC,kBAAC,IAAKH,KAAN,CAAWF,IAAI,SAASU,UAAQ,GAC9B,uBAAGC,KAAK,qBAAqBC,OAAO,SAASC,IAAI,uBAAjD,gC,GAhCeC,IAAM3B,WCSvB4B,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OA2CVC,E,mLAvCMC,SAASC,eAAe,kBAC9BC,MAAMC,QAAU,S,0CAGVH,SAASC,eAAe,kBAC9BC,MAAMC,QAAU,S,+BAGzB,OACI,kBAAC,IAAD,CAAQD,MAAO,CAAEE,UAAW,UACxB,kBAAC,IAAD,CAAQC,SAAUC,UACd,kBAACX,EAAD,CAAQY,UAAU,yBAAyBL,MAAO,CAAEM,QAAS,IACzD,kBAAC,EAAD,OAEJ,kBAACX,EAAD,CAASK,MAAO,CAAEO,OAAQ,WACtB,yBAAKF,UAAU,yBAAyBL,MAAO,CAAEM,QAAS,GAAIJ,UAAW,MACrE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOM,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,aACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,gBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,WAMpB,kBAACZ,EAAD,CAAQI,MAAO,CAAES,UAAW,WAA5B,8C,GAnCIjB,IAAM3B,WCRJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFlB,SAASC,eAAe,SD2HpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.dee654cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <h2>About me</h2>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\n\nclass Contacts extends Component {\n    render() {\n        return (\n            <h2>Contacts</h2>\n        )\n    }\n}\n\nexport default Contacts;","import React, { Component } from 'react';\n\nclass Experiences extends Component {\n    render() {\n        return (\n            <h2>Experiences</h2>\n        )\n    }\n}\n\nexport default Experiences;","import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\nimport { Menu } from 'antd';\nimport { UserOutlined, ContactsOutlined, ProjectOutlined } from '@ant-design/icons';\n\nconst { SubMenu } = Menu;\n\nclass Navigation extends React.Component {\n  state = {\n    current: 'mail',\n  };\n\n  handleClick = e => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    return (\n      <Menu mode=\"horizontal\">\n        <Menu.Item key=\"user\" icon={<UserOutlined />}>\n          <Link to=\"/about\">about Me</Link>\n        </Menu.Item>\n        <Menu.Item key=\"contacts\" icon={<ContactsOutlined />}>\n          <Link to=\"/contacts\">CONTACTs</Link>\n        </Menu.Item>\n        <SubMenu icon={<ProjectOutlined />} title=\"experiences\">\n          <Menu.ItemGroup title=\"Item 1\">\n            <Menu.Item key=\"experiences:1\"><Link to=\"/experiences\">Languages</Link></Menu.Item>\n            <Menu.Item key=\"experiences:2\"><Link to=\"/experiences\">Option 2</Link></Menu.Item>\n          </Menu.ItemGroup>\n          <Menu.ItemGroup title=\"Item 2\">\n            <Menu.Item key=\"experiences:3\"><Link to=\"/experiences\">projects</Link></Menu.Item>\n            <Menu.Item key=\"experiences:4\"><Link to=\"/experiences\">organizations</Link></Menu.Item>\n          </Menu.ItemGroup>\n        </SubMenu>\n        <Menu.Item key=\"alipay\" disabled>\n          <a href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Navigation Four - Link\n          </a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\n// ReactDOM.render(<App />, mountNode);\nexport default Navigation;","import React from 'react';\nimport './App.css';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport About from './components/About';\nimport Contacts from './components/Contacts';\nimport Experiences from './components/Experiences';\n\nimport { Layout } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport Navigation from './components/Navigation';\n\nconst { Header, Content, Footer } = Layout;\n\nclass App extends React.Component {\n    componentWillMount() {\n        var loader = document.getElementById('loader-wrapper');\n        loader.style.display = 'flex';\n    }\n    componentDidMount() {\n        var loader = document.getElementById('loader-wrapper');\n        loader.style.display = 'none';\n    }\n  render() {\n      return (\n          <Layout style={{ minHeight: '100vh' }}>\n              <Router basename={process.env.PUBLIC_URL}>\n                  <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n                      <Navigation />\n                  </Header>\n                  <Content style={{ margin: '0 16px' }}>\n                      <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                          <Switch>\n                              <Route path=\"/about\">\n                                  <About />\n                              </Route>\n                              <Route path=\"/contacts\">\n                                  <Contacts />\n                              </Route>\n                              <Route path=\"/experiences\">\n                                  <Experiences />\n                              </Route>\n                              <Route path=\"/\">\n                                  <About />\n                              </Route>\n                          </Switch>\n                      </div>\n                  </Content>\n              </Router>\n              <Footer style={{ textAlign: 'center' }}>portfolio Â©2020 Created by dlthgud</Footer>\n          </Layout>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}